// Brute force with time complexity of O(n^2) with space complexity O(n).
/*Approach: consider every pair of elements and check if their sum equals the target. This can be done using nested loops, where the outer loop iterates from the first element to the second-to-last element, and the inner loop iterates from the next element to the last element.*/

class Solution1{
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>ans;
       for(int i=0;i<nums.size()-1;i++)
       {
           for(int j=i+1;j<nums.size();j++)
           {
               if(nums[i]+nums[j]==target)
               {
                    ans.push_back(i);
                    ans.push_back(j);
               }
           }
       } 
       return ans;
    }
};

// Brute force with time complexity of O(n^2) with space complexity O(1).
class Solution2{
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       for(int i=0;i<nums.size()-1;i++)
       {
           for(int j=i+1;j<nums.size();j++)
           {
               if(nums[i]+nums[j]==target)
               {
                   return {i,j};
               }
           }
       } 
       return {};
    }
};

//Time complexity=O(nlogn) and space O(n)
/*Approach: Since this problem require to output pair of indices instead of pair of values, so we need an array, let say arr to store their value with their respective indices.
Sort array arr in increasing order by their values.
Then use two pointer, left point to first element, right point to last element.*/

class Solution3{
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<pair<int,int>>v(nums.size());
        for(int i=0;i<nums.size();i++)
        {
            v[i]=make_pair(nums[i],i);
        }
        sort(v.begin(),v.end());
        int start=0;
        int end=nums.size()-1;
        while(start<end)
        {
           int sum=v[start].first+v[end].first;
           if(sum==target)
           return {v[start].second,v[end].second};
         if(target>sum)
            start+=1;
           else
            end=end-1;
         
        }
        return {};
    }
};

//time complexity of O(n) ince hash table lookups take constant time on average. Space complexity-O(n+n)

/*Efficient Approach:  to use a hash table (unordered_map in C++). We can iterate through the array once, and for each element, check if the target minus the current element exists in the hash table. If it does, we have found a valid pair of numbers. If not, we add the current element to the hash table.*/

class Solution4{
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>ans;
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++)
        {
            auto k=mp.find(target-nums[i]);
            if(k!=mp.end())
            {
                int y=k->second;
               ans.push_back(i);
               ans.push_back(y);
            }
            else
            mp.insert(make_pair(nums[i],i));
        }
        return ans;
    }
};

//time complexity of O(n) ince hash table lookups take constant time on average. Space complexity-O(n)

class Solution5{
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++)
        {
            auto k=mp.find(target-nums[i]);
            if(k!=mp.end())
            {
                int y=k->second;
                return {i,y};
            }
            mp.insert(make_pair(nums[i],i));
        }
        return {};
    }
};

 //Code for easy explaination

class Solution6 {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
       
        for(int i = 0; i < nums.size(); i++){
            if(mp.find(target - nums[i]) == mp.end())
                mp[nums[i]] = i;
            else
                return {mp[target - nums[i]], i};
        }
 
        return {-1, -1};
    }
};

