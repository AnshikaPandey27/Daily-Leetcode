//Brute force , gives TLE 
// NOTE: prices[j]-prices[i] because price at jth day must be greater than i or else it will be a loss.
class Solution1 {
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        for(int i=0;i<prices.size()-1;i++)
        {
            for(int j=i+1;j<prices.size();j++)
            {
                //if(prices[j]>prices[i]) :may or may not write it runs same
                ans=max(ans,prices[j]-prices[i]);
            }
        }
        return ans;
    }
};

//using a set or map also gives wrong answer due to duplicate values
class Solution2{
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        map<int,int>mp;
        for(auto i:prices)
        mp[i]=i;
        for(auto j:prices)
        {
            if(!mp.empty())
            {
            auto h=mp.rbegin();
            if(h->first>j)
            ans=max(ans,h->first-j);
            mp.erase(j);
            }
        }
        return ans;
    }
};

//stack approach (my solution)
// time complexity:O(n) space complexity: O(n)
class Solution3{
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        stack<int>st;
        st.push(prices[0]);
        for(int i=1;i<prices.size();i++)
    {
        if(prices[i]<st.top())
        {
            st.push(prices[i]);
        }
        else
        {
            ans=max(ans,prices[i]-st.top());
        }
    }
    return ans;        
    }
};


//dp solution 
//bcoz we have to keep track of minimal or maximal values 
// time complexity:O(n) space complexity: O(1)

class Solution{
public:
    int maxProfit(vector<int>& prices) {
        int m=prices[0];
        int price=0;
        for(int i=1;i<prices.size();i++)
        {
            m=min(m,prices[i]);
            price=max(price,prices[i]-m);
        }
        return price;
    }
    };

//tabulation method--copied from solutions
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<int> maxPrices(n, 0);
        maxPrices[n-1] = prices[n-1];
        for(int i=n-2; i>=0; i--){
            maxPrices[i] = max(maxPrices[i+1], prices[i]); 
        }
        int maxProfit = 0;
        for(int i=0; i<n; i++){
            maxProfit = max(maxProfit, maxPrices[i] - prices[i]); 
        }
        return maxProfit;
    }
};


